name: CI Tests

on:
  push:
    branches:
      - master
      - publish_with_poetry
    tags:
      - "*"
  pull_request:
    branches:
      - "*"

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: "3.10"
      - name: Bootstrap poetry
        run: |
          curl -sL https://install.python-poetry.org | python - -y ${{ matrix.bootstrap-args }}
      - name: Configure poetry
        run: poetry config virtualenvs.in-project true
      - name: Set up cache
        uses: actions/cache@v2
        id: cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        run: timeout 10s poetry run pip --version || rm -rf .venv
      - name: Install dependencies
        run: poetry install
      - name: Lint
        run: "poetry run tox -e lint"
      - name: Safety
        run: "poetry run tox -e safety"
  build:
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        name:
          - "ubuntu-py37"
          - "ubuntu-py38"
          - "ubuntu-py39"
          - "ubuntu-py310"

          - "macos-py37"
          - "macos-py38"
          - "macos-py39"
          - "macos-py310"

          - "windows-py37"
          - "windows-py38"
          - "windows-py39"
          - "windows-py310"

        include:
          - name: "ubuntu-py37"
            python: "3.7"
            os: ubuntu-latest
            tox_env: "py37"
          - name: "ubuntu-py38"
            python: "3.8"
            os: ubuntu-latest
            tox_env: "py38"
          - name: "ubuntu-py39"
            python: "3.9"
            os: ubuntu-latest
            tox_env: "py39"
          - name: "ubuntu-py310"
            python: "3.10"
            os: ubuntu-latest
            tox_env: "py310"

          - name: "macos-py37"
            python: "3.7"
            os: macos-latest
            tox_env: "py37"
          - name: "macos-py38"
            python: "3.8"
            os: macos-latest
            tox_env: "py38"
          - name: "macos-py39"
            python: "3.9"
            os: macos-latest
            tox_env: "py39"
          - name: "macos-py310"
            python: "3.10"
            os: macos-latest
            tox_env: "py310"

          - name: "windows-py37"
            python: "3.7"
            os: windows-latest
            tox_env: "py37"
          - name: "windows-py38"
            python: "3.8"
            os: windows-latest
            tox_env: "py38"
          - name: "windows-py39"
            python: "3.9"
            os: windows-latest
            tox_env: "py39"
          - name: "windows-py310"
            python: "3.10"
            os: windows-latest
            tox_env: "py310"

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
      - name: Get full Python version
        id: full-python-version
        run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")
      - name: Bootstrap poetry
        run: |
          curl -sL https://install.python-poetry.org | python - -y ${{ matrix.bootstrap-args }}
      - name: Update PATH
        if: ${{ matrix.os != 'windows-latest' }}
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: Update Path for Windows
        if: ${{ matrix.os == 'windows-latest' }}
        run: echo "$APPDATA\Python\Scripts" >> $GITHUB_PATH
      - name: Configure poetry
        run: poetry config virtualenvs.in-project true
      - name: Set up cache
        uses: actions/cache@v2
        id: cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        run: timeout 10s poetry run pip --version || rm -rf .venv
      - name: Install dependencies
        run: poetry install
      - name: Test build
        run: "poetry run tox -e ${{ matrix.tox_env }}-cov-report"
      - name: Send coverage report to codeclimate
        uses: paambaati/codeclimate-action@v2.6.0
        with:
          coverageCommand: echo "Ignore rerun"
          coverageLocations: ${{github.workspace}}/coverage.xml:coverage.py
        env:
          CC_TEST_REPORTER_ID: ${{secrets.CC_TEST_REPORTER_ID}}
      - name: Send coverage report to codecov
        uses: codecov/codecov-action@v1
        with:
          env_vars: OS=${{ matrix.os }},PYTHON=${{ matrix.python }}
          file: ./coverage.xml
